let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <C-Space> 
inoremap <expr> <Up> pumvisible() ? "\" : "\<Up>"
inoremap <expr> <Down> pumvisible() ? "\" : "\<Down>"
inoremap <expr> <S-Tab> pumvisible() ? "\" : "\<S-Tab>"
inoremap <silent> <SNR>98_yrrecord =YRRecord3()
imap <silent> <Plug>IMAP_JumpBack =IMAP_Jumpfunc('b', 0)
imap <silent> <Plug>IMAP_JumpForward =IMAP_Jumpfunc('', 0)
inoremap <silent> <Plug>NERDCommenterInsert  <BS>:call NERDComment('i', "insert")
inoremap <silent> <Plug>snipMateShow =snipMate#ShowAvailableSnips()
inoremap <silent> <Plug>snipMateBack =snipMate#BackwardsSnippet()
inoremap <silent> <Plug>snipMateNextOrTrigger =snipMate#TriggerSnippet()
inoremap <C-BS> 
noremap  <Left>
xmap 	 <Plug>snipMateVisual
smap 	 <Plug>snipMateNextOrTrigger
nnoremap 	 :e#
vmap <NL> <Plug>IMAP_JumpForward
nmap <NL> <Plug>IMAP_JumpForward
onoremap <NL> <Down>
noremap  <Up>
noremap  <Right>
nnoremap <silent>  :YRReplace '1', p
nnoremap <silent>  :YRReplace '-1', P
nnoremap <silent>  :call repeat#wrap("\<C-R>",v:count)
nmap d :cs find d =expand("<cword>")	
nmap i :cs find i ^=expand("<cfile>")$
nmap f :cs find f =expand("<cfile>")	
nmap e :cs find e =expand("<cword>")	
nmap t :cs find t =expand("<cword>")	
nmap c :cs find c =expand("<cword>")	
nmap g :cs find g =expand("<cword>")	
nmap s :cs find s =expand("<cword>")	
nnoremap  :tab split :exe 'tj' expand('<cword>')
nnoremap   , 
vnoremap <silent> # :let old_reg=getreg('"')|let old_regtype=getregtype('"')gvy?=substitute(escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')gV:call setreg('"', old_reg, old_regtype)
vnoremap <silent> * :let old_reg=getreg('"')|let old_regtype=getregtype('"')gvy/=substitute(escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')gV:call setreg('"', old_reg, old_regtype)
nnoremap ,d :YcmShowDetailedDiagnostic
nnoremap <silent> ,n :call NumberToggle()
nmap ,ihn :IHN
nmap ,is :IHS:A
nmap ,ih :IHS
nnoremap <silent> ,q :QToggle
nnoremap <silent> ,l :LToggle
nmap ,ca <Plug>NERDCommenterAltDelims
xmap ,cu <Plug>NERDCommenterUncomment
nmap ,cu <Plug>NERDCommenterUncomment
xmap ,cb <Plug>NERDCommenterAlignBoth
nmap ,cb <Plug>NERDCommenterAlignBoth
xmap ,cl <Plug>NERDCommenterAlignLeft
nmap ,cl <Plug>NERDCommenterAlignLeft
nmap ,cA <Plug>NERDCommenterAppend
xmap ,cy <Plug>NERDCommenterYank
nmap ,cy <Plug>NERDCommenterYank
xmap ,cs <Plug>NERDCommenterSexy
nmap ,cs <Plug>NERDCommenterSexy
xmap ,ci <Plug>NERDCommenterInvert
nmap ,ci <Plug>NERDCommenterInvert
nmap ,c$ <Plug>NERDCommenterToEOL
xmap ,cn <Plug>NERDCommenterNested
nmap ,cn <Plug>NERDCommenterNested
xmap ,cm <Plug>NERDCommenterMinimal
nmap ,cm <Plug>NERDCommenterMinimal
xmap ,c  <Plug>NERDCommenterToggle
nmap ,c  <Plug>NERDCommenterToggle
xmap ,cc <Plug>NERDCommenterComment
nnoremap <silent> ,b :CommandTBuffer
nnoremap <silent> ,t :CommandT
vnoremap <silent> ,,w :call EasyMotion#WB(1, 0)
onoremap <silent> ,,w :call EasyMotion#WB(0, 0)
nnoremap <silent> ,,w :call EasyMotion#WB(0, 0)
vnoremap <silent> ,,t :call EasyMotion#T(1, 0)
onoremap <silent> ,,t :call EasyMotion#T(0, 0)
nnoremap <silent> ,,t :call EasyMotion#T(0, 0)
vnoremap <silent> ,,n :call EasyMotion#Search(1, 0)
onoremap <silent> ,,n :call EasyMotion#Search(0, 0)
nnoremap <silent> ,,n :call EasyMotion#Search(0, 0)
vnoremap <silent> ,,k :call EasyMotion#JK(1, 1)
onoremap <silent> ,,k :call EasyMotion#JK(0, 1)
nnoremap <silent> ,,k :call EasyMotion#JK(0, 1)
vnoremap <silent> ,,j :call EasyMotion#JK(1, 0)
onoremap <silent> ,,j :call EasyMotion#JK(0, 0)
nnoremap <silent> ,,j :call EasyMotion#JK(0, 0)
vnoremap <silent> ,,gE :call EasyMotion#EW(1, 1)
onoremap <silent> ,,gE :call EasyMotion#EW(0, 1)
nnoremap <silent> ,,gE :call EasyMotion#EW(0, 1)
vnoremap <silent> ,,f :call EasyMotion#F(1, 0)
onoremap <silent> ,,f :call EasyMotion#F(0, 0)
nnoremap <silent> ,,f :call EasyMotion#F(0, 0)
vnoremap <silent> ,,e :call EasyMotion#E(1, 0)
onoremap <silent> ,,e :call EasyMotion#E(0, 0)
nnoremap <silent> ,,e :call EasyMotion#E(0, 0)
vnoremap <silent> ,,b :call EasyMotion#WB(1, 1)
onoremap <silent> ,,b :call EasyMotion#WB(0, 1)
nnoremap <silent> ,,b :call EasyMotion#WB(0, 1)
vnoremap <silent> ,,W :call EasyMotion#WBW(1, 0)
onoremap <silent> ,,W :call EasyMotion#WBW(0, 0)
nnoremap <silent> ,,W :call EasyMotion#WBW(0, 0)
vnoremap <silent> ,,T :call EasyMotion#T(1, 1)
onoremap <silent> ,,T :call EasyMotion#T(0, 1)
nnoremap <silent> ,,T :call EasyMotion#T(0, 1)
vnoremap <silent> ,,N :call EasyMotion#Search(1, 1)
onoremap <silent> ,,N :call EasyMotion#Search(0, 1)
nnoremap <silent> ,,N :call EasyMotion#Search(0, 1)
vnoremap <silent> ,,ge :call EasyMotion#E(1, 1)
onoremap <silent> ,,ge :call EasyMotion#E(0, 1)
nnoremap <silent> ,,ge :call EasyMotion#E(0, 1)
vnoremap <silent> ,,F :call EasyMotion#F(1, 1)
onoremap <silent> ,,F :call EasyMotion#F(0, 1)
nnoremap <silent> ,,F :call EasyMotion#F(0, 1)
vnoremap <silent> ,,E :call EasyMotion#EW(1, 0)
onoremap <silent> ,,E :call EasyMotion#EW(0, 0)
nnoremap <silent> ,,E :call EasyMotion#EW(0, 0)
vnoremap <silent> ,,B :call EasyMotion#WBW(1, 1)
onoremap <silent> ,,B :call EasyMotion#WBW(0, 1)
nnoremap <silent> ,,B :call EasyMotion#WBW(0, 1)
nnoremap <silent> ,- :exe "resize " . (winheight(0) * 2/3)
nnoremap <silent> ,+ :exe "resize " . (winheight(0) * 3/2)
nnoremap ,ls :FufBuffer 
nnoremap ,mc :cd %:p:h/..:make clean
nnoremap ,mr :cd %:p:h/..:make release -j4
nnoremap ,md :cd %:p:h/..:make debug -j4
nnoremap ,/ /\v
nnoremap <silent> ,h :match OverLength /\%81v.\+/
nnoremap ,w :write
nnoremap ,sv :source $MYVIMRC
nnoremap ,ev :vsplit $MYVIMRC
nmap ,cc <Plug>NERDCommenterComment
nnoremap <silent> ,hc :silent :nohlsearch
nnoremap <silent> ,s :set nolist!
nnoremap / /\V
nmap @ :YRMapsMacro
xnoremap <silent> P :YRPaste 'P', 'v'
nnoremap <silent> P :YRPaste 'P'
xmap S <Plug>VSurround
nnoremap <silent> U :call repeat#wrap('U',v:count)
vmap [% [%m'gv``
nnoremap \cd :cd %:p:h
vmap ]% ]%m'gv``
vmap a% [%v]%
nmap cs <Plug>Csurround
xnoremap <silent> d :YRDeleteRange 'v'
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
nnoremap <silent> gp :YRPaste 'gp'
nnoremap <silent> gP :YRPaste 'gP'
xmap gS <Plug>VgSurround
xnoremap <silent> p :YRPaste 'p', 'v'
nnoremap <silent> p :YRPaste 'p'
nnoremap <silent> u :call repeat#wrap('u',v:count)
xnoremap <silent> x :YRDeleteRange 'v'
xnoremap <silent> y :YRYankRange 'v'
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
vnoremap ~ ygv"=TwiddleCase(@")Pgv
snoremap <BS> b<BS>
smap <S-Tab> <Plug>snipMateBack
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nnoremap <silent> <SNR>98_yrrecord :call YRRecord3()
nnoremap <silent> <Plug>SurroundRepeat .
nmap <Nul><Nul>d :vert scs find d =expand("<cword>")
nmap <Nul><Nul>i :vert scs find i ^=expand("<cfile>")$	
nmap <Nul><Nul>f :vert scs find f =expand("<cfile>")	
nmap <Nul><Nul>e :vert scs find e =expand("<cword>")
nmap <Nul><Nul>t :vert scs find t =expand("<cword>")
nmap <Nul><Nul>c :vert scs find c =expand("<cword>")
nmap <Nul><Nul>g :vert scs find g =expand("<cword>")
nmap <Nul><Nul>s :vert scs find s =expand("<cword>")
nmap <Nul>d :scs find d =expand("<cword>")	
nmap <Nul>i :scs find i ^=expand("<cfile>")$	
nmap <Nul>f :scs find f =expand("<cfile>")	
nmap <Nul>e :scs find e =expand("<cword>")	
nmap <Nul>t :scs find t =expand("<cword>")	
nmap <Nul>c :scs find c =expand("<cword>")	
nmap <Nul>g :scs find g =expand("<cword>")	
nmap <Nul>s :scs find s =expand("<cword>")	
nnoremap <silent> <F11> :call conque_term#exec_file()
vmap <silent> <Plug>IMAP_JumpBack `<i=IMAP_Jumpfunc('b', 0)
vmap <silent> <Plug>IMAP_JumpForward i=IMAP_Jumpfunc('', 0)
vmap <silent> <Plug>IMAP_DeleteAndJumpBack "_<Del>i=IMAP_Jumpfunc('b', 0)
vmap <silent> <Plug>IMAP_DeleteAndJumpForward "_<Del>i=IMAP_Jumpfunc('', 0)
nmap <silent> <Plug>IMAP_JumpBack i=IMAP_Jumpfunc('b', 0)
nmap <silent> <Plug>IMAP_JumpForward i=IMAP_Jumpfunc('', 0)
xnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("x", "Uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")
xnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("x", "AlignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")
xnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("x", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")
xnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("x", "Yank")
nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")
xnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("x", "Sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")
xnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("x", "Invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")
xnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("x", "Nested")
nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")
xnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("x", "Minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")
xnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("x", "Toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")
xnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("x", "Comment")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")
snoremap <silent> <Plug>snipMateBack a=snipMate#BackwardsSnippet()
snoremap <silent> <Plug>snipMateNextOrTrigger a=snipMate#TriggerSnippet()
nnoremap <F4> :buffers:buffer 
nnoremap <C-Tab> :bnext
nnoremap <C-S-Tab> :bprevious
nnoremap <F6> :split:ConqueTerm bash
nnoremap <F3> :NERDTreeToggle
nnoremap <silent> <F8> :YRShow
map <F10> :TagbarToggle
map <silent> <S-F10> :cd %:p:h:!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <expr> 	 pumvisible() ? "\" : "\	"
imap <NL> <Plug>IMAP_JumpForward
imap 	 <Plug>snipMateShow
imap  <Plug>Isurround
inoremap  u
inoremap  u
inoremap    u
imap ,ihn :IHN
imap ,is :IHS:A
imap ,ih :IHS
inoremap , ,u
nnoremap Ý :vsp :exec("tag ".expand("<cword>"))
inoremap JK 
inoremap ` `u
inoremap jk 
cmap w!! %!sudo tee > /dev/null %
iabbr y@@ a.fiodorov@yahoo.co.uk
iabbr u@@ a.fiodorov@ucl.ac.uk
let &cpo=s:cpo_save
unlet s:cpo_save
set autoread
set backspace=indent,eol,start
set balloonexpr=SyntasticBalloonsExprNotifier()
set clipboard=unnamedplus
set completefunc=youcompleteme#Complete
set completeopt=preview,menuone
set cpoptions=aAceFsB
set cscopetag
set cscopeverbose
set noequalalways
set fileencodings=ucs-bom,utf-8,default,latin1
set grepprg=grep\ -nH\ $*
set helplang=en
set hidden
set history=1000
set ignorecase
set listchars=tab:>-,trail:·,eol:$
set mouse=a
set omnifunc=youcompleteme#OmniComplete
set report=10000
set runtimepath=~/.vim/bundle/vim-fugitive,~/.vim/bundle/vim-easymotion,~/.vim/bundle/sparkup/vim/,~/.vim/bundle/vim-rails,~/.vim/bundle/L9,~/.vim/bundle/FuzzyFinder,~/.vim/bundle/command-t,~/.vim/bundle/nerdtree,~/.vim/bundle/vim-addon-mw-utils,~/.vim/bundle/tlib_vim,~/.vim/bundle/vim-snipmate,~/.vim/bundle/vim-repeat,~/.vim/bundle/syntastic,~/.vim/bundle/nerdcommenter,~/.vim/bundle/tagbar,~/.vim/bundle/minibufexpl.vim,~/.vim/bundle/vim-latex,~/.vim/bundle/YouCompleteMe,~/.vim/bundle/ListToggle,~/.vim/bundle/vundle,~/.vim,/usr/share/vim/vim73/vimfiles,/usr/share/vim/vim73,~/.vim/bundle/vundle/,~/.vim/bundle/vim-fugitive/after,~/.vim/bundle/vim-easymotion/after,~/.vim/bundle/sparkup/vim//after,~/.vim/bundle/vim-rails/after,~/.vim/bundle/L9/after,~/.vim/bundle/FuzzyFinder/after,~/.vim/bundle/command-t/after,~/.vim/bundle/nerdtree/after,~/.vim/bundle/vim-addon-mw-utils/after,~/.vim/bundle/tlib_vim/after,~/.vim/bundle/vim-snipmate/after,~/.vim/bundle/vim-repeat/after,~/.vim/bundle/syntastic/after,~/.vim/bundle/nerdcommenter/after,~/.vim/bundle/tagbar/after,~/.vim/bundle/minibufexpl.vim/after,~/.vim/bundle/vim-latex/after,~/.vim/bundle/YouCompleteMe/after,~/.vim/bundle/ListToggle/after,~/.vim/bundle/vundle/after
set smartcase
set spellfile=~/.vim/dict.add
set spelllang=en_gb
set statusline=%#warningmsg#%{SyntasticStatuslineFlag()}%*
set tags=./tags;/
set termencoding=utf-8
set updatetime=2000
set viminfo='10,\"100,:20,%,n~/.vim/viminfo
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif
set wildmenu
set wildmode=list:longest
set winaltkeys=no
set window=40
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/cplus/newPAM/src
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +16 BigDecimal.h
badd +5 pam.h
silent! argdel *
edit pam.cpp
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe '1resize ' . ((&lines * 1 + 20) / 41)
exe 'vert 1resize ' . ((&columns * 119 + 80) / 160)
exe '2resize ' . ((&lines * 37 + 20) / 41)
exe 'vert 2resize ' . ((&columns * 119 + 80) / 160)
exe 'vert 3resize ' . ((&columns * 40 + 80) / 160)
argglobal
enew
file -MiniBufExplorer-
let s:cpo_save=&cpo
set cpo&vim
nnoremap <buffer> h :call search('\[[0-9]*:[^\]]*\]','b'):<BS>
nnoremap <buffer> j gj
nnoremap <buffer> k gk
nnoremap <buffer> l :call search('\[[0-9]*:[^\]]*\]'):<BS>
nnoremap <buffer> <Left> :call search('\[[0-9]*:[^\]]*\]','b'):<BS>
nnoremap <buffer> <Right> :call search('\[[0-9]*:[^\]]*\]'):<BS>
nnoremap <buffer> <Down> gj
nnoremap <buffer> <Up> gk
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=delete
setlocal nobuflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=youcompleteme#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'minibufexpl'
setlocal filetype=minibufexpl
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=8
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=~/.vim/dict.add
setlocal spelllang=en_gb
setlocal statusline=-MiniBufExplorer-
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'minibufexpl'
setlocal syntax=minibufexpl
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal winfixheight
setlocal winfixwidth
setlocal wrap
setlocal wrapmargin=0
wincmd w
argglobal
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <silent> <S-F9> :call C_Arguments()
imap <buffer> <silent> <C-F9> :call C_Run()
imap <buffer> <silent> <F9> :call C_Link():call C_HlMessage()
imap <buffer> <silent> <M-F9> :call C_Compile():call C_HlMessage()
nmap <buffer> <silent> <NL> i=C_JumpCtrlJ()
vnoremap <buffer> /* s/*  */<Left><Left><Left>p
vnoremap <buffer> <silent> `sb :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.block","v")
nnoremap <buffer> <silent> `sb :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.block")
vnoremap <buffer> <silent> `sc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.case")
nnoremap <buffer> <silent> `sc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.case")
vnoremap <buffer> <silent> `ss :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.switch","v")
nnoremap <buffer> <silent> `ss :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.switch")
vnoremap <buffer> <silent> `swh :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.while block","v")
nnoremap <buffer> <silent> `swh :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.while block")
vnoremap <buffer> <silent> `sw :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.while")
nnoremap <buffer> <silent> `sw :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.while")
vnoremap <buffer> <silent> `se :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.else block","v")
nnoremap <buffer> <silent> `se :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.else block")
vnoremap <buffer> <silent> `sife :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if block else","v")
nnoremap <buffer> <silent> `sife :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if block else")
vnoremap <buffer> <silent> `sie :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if else","v")
nnoremap <buffer> <silent> `sie :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if else")
vnoremap <buffer> <silent> `sif :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if block","v")
nnoremap <buffer> <silent> `sif :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if block")
vnoremap <buffer> <silent> `si :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if")
nnoremap <buffer> <silent> `si :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if")
vnoremap <buffer> <silent> `sfr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.range-based for","v")
nnoremap <buffer> <silent> `sfr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.range-based for")
vnoremap <buffer> <silent> `sfo :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.for block","v")
nnoremap <buffer> <silent> `sfo :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.for block")
vnoremap <buffer> <silent> `sf :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.for")
nnoremap <buffer> <silent> `sf :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.for")
vnoremap <buffer> <silent> `sd :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.do while","v")
nnoremap <buffer> <silent> `sd :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.do while")
vnoremap <buffer> <silent> `pw :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.warning")
nnoremap <buffer> <silent> `pw :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.warning")
vnoremap <buffer> <silent> `pp :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.pragma")
nnoremap <buffer> <silent> `pp :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.pragma")
vnoremap <buffer> <silent> `pli :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.line")
nnoremap <buffer> <silent> `pli :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.line")
vnoremap <buffer> <silent> `pe :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.error")
nnoremap <buffer> <silent> `pe :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.error")
vnoremap <buffer> <silent> `pind :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.ifndef-def-endif","v")
nnoremap <buffer> <silent> `pind :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.ifndef-def-endif")
vnoremap <buffer> <silent> `pin :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.ifndef-else-endif","v")
nnoremap <buffer> <silent> `pin :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.ifndef-else-endif")
vnoremap <buffer> <silent> `pid :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.ifdef-else-endif","v")
nnoremap <buffer> <silent> `pid :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.ifdef-else-endif")
vnoremap <buffer> <silent> `pie :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.if-else-endif","v")
nnoremap <buffer> <silent> `pie :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.if-else-endif")
vnoremap <buffer> <silent> `pif :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.if-endif","v")
nnoremap <buffer> <silent> `pif :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.if-endif")
vnoremap <buffer> <silent> `pu :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.undefine")
nnoremap <buffer> <silent> `pu :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.undefine")
vnoremap <buffer> <silent> `pd :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.define")
nnoremap <buffer> <silent> `pd :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.define")
vnoremap <buffer> <silent> `pl :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.include-local")
nnoremap <buffer> <silent> `pl :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.include-local")
vnoremap <buffer> <silent> `pg :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.include-global")
nnoremap <buffer> <silent> `pg :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.include-global")
vnoremap <buffer> <silent> `pih :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.include std lib header")
nnoremap <buffer> <silent> `pih :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.include std lib header")
vnoremap <buffer> <silent> `ifpr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.fscanf")
nnoremap <buffer> <silent> `ifpr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.fscanf")
vnoremap <buffer> <silent> `ifsc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.fprintf")
nnoremap <buffer> <silent> `ifsc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.fprintf")
vnoremap <buffer> <silent> `io :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.open-output-file","v")
nnoremap <buffer> <silent> `io :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.open-output-file")
vnoremap <buffer> <silent> `ii :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.open-input-file","v")
nnoremap <buffer> <silent> `ii :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.open-input-file")
vnoremap <buffer> <silent> `ias :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.assert","v")
nnoremap <buffer> <silent> `ias :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.assert")
vnoremap <buffer> <silent> `isi :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.sizeof","v")
nnoremap <buffer> <silent> `isi :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.sizeof")
vnoremap <buffer> <silent> `ire :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.realloc")
nnoremap <buffer> <silent> `ire :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.realloc")
vnoremap <buffer> <silent> `ima :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.malloc")
nnoremap <buffer> <silent> `ima :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.malloc")
vnoremap <buffer> <silent> `ica :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.calloc")
nnoremap <buffer> <silent> `ica :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.calloc")
vnoremap <buffer> <silent> `ipr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.printf")
nnoremap <buffer> <silent> `ipr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.printf")
vnoremap <buffer> <silent> `isc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.scanf")
nnoremap <buffer> <silent> `isc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.scanf")
vnoremap <buffer> <silent> `iu :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.union","v")
nnoremap <buffer> <silent> `iu :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.union")
vnoremap <buffer> <silent> `is :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.struct","v")
nnoremap <buffer> <silent> `is :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.struct")
vnoremap <buffer> <silent> `ie :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.enum","v")
nnoremap <buffer> <silent> `ie :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.enum")
vnoremap <buffer> <silent> `im :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.main","v")
nnoremap <buffer> <silent> `im :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.main")
vnoremap <buffer> <silent> `isf :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.function-static","v")
nnoremap <buffer> <silent> `isf :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.function-static")
vnoremap <buffer> <silent> `if :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.function","v")
nnoremap <buffer> <silent> `if :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.function")
vnoremap <buffer> <silent> `+rt :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.RTTI","v")
nnoremap <buffer> <silent> `+rt :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.RTTI")
vnoremap <buffer> <silent> `+na :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.namespace alias")
nnoremap <buffer> <silent> `+na :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.namespace alias")
vnoremap <buffer> <silent> `+unb :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.namespace block xxx","v")
nnoremap <buffer> <silent> `+unb :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.namespace block xxx")
vnoremap <buffer> <silent> `+un :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.using namespace xxx")
nnoremap <buffer> <silent> `+un :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.using namespace xxx")
vnoremap <buffer> <silent> `+uns :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.using namespace std")
nnoremap <buffer> <silent> `+uns :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.using namespace std")
vnoremap <buffer> <silent> `+oof :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.open output file","v")
nnoremap <buffer> <silent> `+oof :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.open output file")
vnoremap <buffer> <silent> `+oif :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.open input file","v")
nnoremap <buffer> <silent> `+oif :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.open input file")
vnoremap <buffer> <silent> `+ex :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.extern C","v")
nnoremap <buffer> <silent> `+ex :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.extern C")
vnoremap <buffer> <silent> `+caa :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.catch all","v")
nnoremap <buffer> <silent> `+caa :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.catch all")
vnoremap <buffer> <silent> `+ca :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.catch","v")
nnoremap <buffer> <silent> `+ca :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.catch")
vnoremap <buffer> <silent> `+tr :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.try catch","v")
nnoremap <buffer> <silent> `+tr :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.try catch")
vnoremap <buffer> <silent> `+ioi :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.operator, in")
nnoremap <buffer> <silent> `+ioi :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.operator, in")
vnoremap <buffer> <silent> `+ioo :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.operator, out")
nnoremap <buffer> <silent> `+ioo :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.operator, out")
vnoremap <buffer> <silent> `+tf :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.template function")
nnoremap <buffer> <silent> `+tf :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.template function")
vnoremap <buffer> <silent> `+ita :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template accessor")
nnoremap <buffer> <silent> `+ita :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template accessor")
vnoremap <buffer> <silent> `+itm :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template method")
nnoremap <buffer> <silent> `+itm :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template method")
vnoremap <buffer> <silent> `+itcn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template class using new")
nnoremap <buffer> <silent> `+itcn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template class using new")
vnoremap <buffer> <silent> `+itc :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template class")
nnoremap <buffer> <silent> `+itc :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template class")
vnoremap <buffer> <silent> `+ia :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.accessor")
nnoremap <buffer> <silent> `+ia :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.accessor")
vnoremap <buffer> <silent> `+im :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.method")
nnoremap <buffer> <silent> `+im :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.method")
vnoremap <buffer> <silent> `+icn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.class using new")
nnoremap <buffer> <silent> `+icn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.class using new")
vnoremap <buffer> <silent> `+ic :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.class")
nnoremap <buffer> <silent> `+ic :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.class")
vnoremap <buffer> <silent> `+ec :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.error class")
nnoremap <buffer> <silent> `+ec :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.error class")
vnoremap <buffer> <silent> `+tcn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.template class using new")
nnoremap <buffer> <silent> `+tcn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.template class using new")
vnoremap <buffer> <silent> `+tc :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.template class")
nnoremap <buffer> <silent> `+tc :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.template class")
vnoremap <buffer> <silent> `+cn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.class using new")
nnoremap <buffer> <silent> `+cn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.class using new")
vnoremap <buffer> <silent> `+c :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.class")
nnoremap <buffer> <silent> `+c :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.class")
vnoremap <buffer> <silent> `+fb :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.ios flagbits")
nnoremap <buffer> <silent> `+fb :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.ios flagbits")
vnoremap <buffer> <silent> `+om :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.output manipulators")
nnoremap <buffer> <silent> `+om :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.output manipulators")
vnoremap <buffer> <silent> `+ich :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.include C std lib header")
nnoremap <buffer> <silent> `+ich :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.include C std lib header")
vnoremap <buffer> <silent> `+ih :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.include C++ std lib header")
nnoremap <buffer> <silent> `+ih :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.include C++ std lib header")
vnoremap <buffer> <silent> `cma :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.macros")
nnoremap <buffer> <silent> `cma :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.macros")
vnoremap <buffer> <silent> `csc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.special comments")
nnoremap <buffer> <silent> `csc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.special comments")
vnoremap <buffer> <silent> `ckc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.keyword comments")
nnoremap <buffer> <silent> `ckc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.keyword comments")
vnoremap <buffer> <silent> `chs :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.H file sections")
nnoremap <buffer> <silent> `chs :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.H file sections")
vnoremap <buffer> <silent> `ccs :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.C file sections")
nnoremap <buffer> <silent> `ccs :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.C file sections")
vnoremap <buffer> <silent> `cfdh :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.file description header")
nnoremap <buffer> <silent> `cfdh :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.file description header")
vnoremap <buffer> <silent> `cfdi :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.file description impl")
nnoremap <buffer> <silent> `cfdi :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.file description impl")
vnoremap <buffer> <silent> `ccl :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.class")
nnoremap <buffer> <silent> `ccl :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.class")
vnoremap <buffer> <silent> `cme :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.method")
nnoremap <buffer> <silent> `cme :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.method")
vnoremap <buffer> <silent> `cfu :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.function")
nnoremap <buffer> <silent> `cfu :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.function")
vnoremap <buffer> <silent> `cfr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.frame")
nnoremap <buffer> <silent> `cfr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.frame")
vnoremap <buffer> <silent> `njt :call mmtemplates#core#InsertTemplate(g:C_Templates,"Snippets.jump tags")
nnoremap <buffer> <silent> `njt :call mmtemplates#core#InsertTemplate(g:C_Templates,"Snippets.jump tags")
map <buffer> <silent> `hm :call C_Help("m")
map <buffer> <silent> `hp :call C_HelpCsupport()
map <buffer> <silent> `ro :call C_Toggle_Gvim_Xterm()
map <buffer> <silent> `rx :call C_XtermSize()
map <buffer> <silent> `rs :call C_Settings()
vmap <buffer> <silent> `rh :call C_Hardcopy()
nmap <buffer> <silent> `rh :call C_Hardcopy()
omap <buffer> <silent> `rh :call C_Hardcopy()
map <buffer> <silent> `ri :call C_Indent()
map <buffer> <silent> `rccs :call C_CppcheckSeverityInput()
map <buffer> <silent> `rcc :call C_CppcheckCheck():call C_HlMessage()
map <buffer> <silent> `rpa :call C_SplintArguments()
map <buffer> <silent> `rp :call C_SplintCheck():call C_HlMessage()
map <buffer> <silent> `rma :call C_MakeArguments()
map <buffer> <silent> `rme :call C_ExeToRun()
map <buffer> <silent> `rmc :call C_MakeClean()
map <buffer> <silent> `rcm :call C_ChooseMakefile()
map <buffer> <silent> `rm :call C_Make()
map <buffer> <silent> `ra :call C_Arguments()
map <buffer> <silent> `rr :call C_Run()
map <buffer> <silent> `rl :call C_Link():call C_HlMessage()
map <buffer> <silent> `rc :call C_Compile():call C_HlMessage()
nnoremap <buffer> <silent> `nts :call mmtemplates#core#ChooseStyle(g:C_Templates,"!pick")
nnoremap <buffer> <silent> `ntr :call mmtemplates#core#ReadTemplates(g:C_Templates,"reload","all")
nnoremap <buffer> <silent> `ntl :call mmtemplates#core#EditTemplateFiles(g:C_Templates,-1)
noremap <buffer> <silent> `ns :call C_ProtoShow()
noremap <buffer> <silent> `nc :call C_ProtoClear()
noremap <buffer> <silent> `ni :call C_ProtoInsert()
vnoremap <buffer> <silent> `nm :call C_ProtoPick("method")
nnoremap <buffer> <silent> `nm :call C_ProtoPick("method")
onoremap <buffer> <silent> `nm :call C_ProtoPick("method")
vnoremap <buffer> <silent> `nf :call C_ProtoPick("function")
nnoremap <buffer> <silent> `nf :call C_ProtoPick("function")
onoremap <buffer> <silent> `nf :call C_ProtoPick("function")
vnoremap <buffer> <silent> `np :call C_ProtoPick("function")
nnoremap <buffer> <silent> `np :call C_ProtoPick("function")
onoremap <buffer> <silent> `np :call C_ProtoPick("function")
noremap <buffer> <silent> `ne :call C_CodeSnippet("e")
vnoremap <buffer> <silent> `nw :call C_CodeSnippet("wv")
nnoremap <buffer> <silent> `nw :call C_CodeSnippet("w")
onoremap <buffer> <silent> `nw :call C_CodeSnippet("w")
noremap <buffer> <silent> `nv :call C_CodeSnippet("view")
noremap <buffer> <silent> `nr :call C_CodeSnippet("r")
vnoremap <buffer> <silent> `in :call C_CodeFor("down","v")
nnoremap <buffer> <silent> `in :call C_CodeFor("down"    )
onoremap <buffer> <silent> `in :call C_CodeFor("down"    )
vnoremap <buffer> <silent> `i0 :call C_CodeFor("up","v")
nnoremap <buffer> <silent> `i0 :call C_CodeFor("up"    )
onoremap <buffer> <silent> `i0 :call C_CodeFor("up"    )
noremap <buffer> <silent> `pr0 :call C_PPIf0Remove()
vnoremap <buffer> <silent> `pi0 :call C_PPIf0("v")
nnoremap <buffer> <silent> `pi0 :call C_PPIf0("a")2ji
onoremap <buffer> <silent> `pi0 :call C_PPIf0("a")2ji
vnoremap <buffer> <silent> `cx :call C_CommentToggle( )
nnoremap <buffer> <silent> `cx :call C_CommentToggle( )
onoremap <buffer> <silent> `cx :call C_CommentToggle( )
vnoremap <buffer> <silent> `ct s:call C_InsertDateAndTime('dt')a
nnoremap <buffer> <silent> `ct :call C_InsertDateAndTime('dt')
onoremap <buffer> <silent> `ct :call C_InsertDateAndTime('dt')
vnoremap <buffer> <silent> `cd s:call C_InsertDateAndTime('d')a
nnoremap <buffer> <silent> `cd :call C_InsertDateAndTime('d')
onoremap <buffer> <silent> `cd :call C_InsertDateAndTime('d')
vnoremap <buffer> <silent> `co :call C_CommentToCode():nohlsearch
nnoremap <buffer> <silent> `co :call C_CommentToCode():nohlsearch
onoremap <buffer> <silent> `co :call C_CommentToCode():nohlsearch
vnoremap <buffer> <silent> `cc :call C_CodeToCommentCpp():nohlsearchj
nnoremap <buffer> <silent> `cc :call C_CodeToCommentCpp():nohlsearchj
onoremap <buffer> <silent> `cc :call C_CodeToCommentCpp():nohlsearchj
vnoremap <buffer> <silent> `c* :call C_CodeToCommentC():nohlsearchj
nnoremap <buffer> <silent> `c* :call C_CodeToCommentC():nohlsearchj
onoremap <buffer> <silent> `c* :call C_CodeToCommentC():nohlsearchj
noremap <buffer> <silent> `cs :call C_GetLineEndCommCol()
vnoremap <buffer> <silent> `cj :call C_AdjustLineEndComm()
nnoremap <buffer> <silent> `cj :call C_AdjustLineEndComm()
noremap <buffer> <silent> `cl :call C_EndOfLineComment()
vnoremap <buffer> { S{}Pk=iB
map <buffer> <silent> <S-F9> :call C_Arguments()
map <buffer> <silent> <C-F9> :call C_Run()
map <buffer> <silent> <F9> :call C_Link():call C_HlMessage()
map <buffer> <silent> <M-F9> :call C_Compile():call C_HlMessage()
imap <buffer> <silent> <NL> =C_JumpCtrlJ()
inoremap <buffer> /* /*/kA 
inoremap <buffer> /* /*  */<Left><Left><Left>
inoremap <buffer> <silent> `sb :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.block")
inoremap <buffer> <silent> `sc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.case")
inoremap <buffer> <silent> `ss :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.switch")
inoremap <buffer> <silent> `swh :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.while block")
inoremap <buffer> <silent> `sw :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.while")
inoremap <buffer> <silent> `se :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.else block")
inoremap <buffer> <silent> `sife :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if block else")
inoremap <buffer> <silent> `sie :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if else")
inoremap <buffer> <silent> `sif :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if block")
inoremap <buffer> <silent> `si :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.if")
inoremap <buffer> <silent> `sfr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.range-based for")
inoremap <buffer> <silent> `sfo :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.for block")
inoremap <buffer> <silent> `sf :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.for")
inoremap <buffer> <silent> `sd :call mmtemplates#core#InsertTemplate(g:C_Templates,"Statements.do while")
inoremap <buffer> <silent> `pw :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.warning")
inoremap <buffer> <silent> `pp :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.pragma")
inoremap <buffer> <silent> `pli :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.line")
inoremap <buffer> <silent> `pe :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.error")
inoremap <buffer> <silent> `pind :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.ifndef-def-endif")
inoremap <buffer> <silent> `pin :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.ifndef-else-endif")
inoremap <buffer> <silent> `pid :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.ifdef-else-endif")
inoremap <buffer> <silent> `pie :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.if-else-endif")
inoremap <buffer> <silent> `pif :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.if-endif")
inoremap <buffer> <silent> `pu :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.undefine")
inoremap <buffer> <silent> `pd :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.define")
inoremap <buffer> <silent> `pl :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.include-local")
inoremap <buffer> <silent> `pg :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.include-global")
inoremap <buffer> <silent> `pih :call mmtemplates#core#InsertTemplate(g:C_Templates,"Preprocessor.include std lib header")
inoremap <buffer> <silent> `ifpr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.fscanf")
inoremap <buffer> <silent> `ifsc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.fprintf")
inoremap <buffer> <silent> `io :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.open-output-file")
inoremap <buffer> <silent> `ii :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.open-input-file")
inoremap <buffer> <silent> `ias :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.assert")
inoremap <buffer> <silent> `isi :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.sizeof")
inoremap <buffer> <silent> `ire :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.realloc")
inoremap <buffer> <silent> `ima :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.malloc")
inoremap <buffer> <silent> `ica :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.calloc")
inoremap <buffer> <silent> `ipr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.printf")
inoremap <buffer> <silent> `isc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.scanf")
inoremap <buffer> <silent> `iu :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.union")
inoremap <buffer> <silent> `is :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.struct")
inoremap <buffer> <silent> `ie :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.enum")
inoremap <buffer> <silent> `im :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.main")
inoremap <buffer> <silent> `isf :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.function-static")
inoremap <buffer> <silent> `if :call mmtemplates#core#InsertTemplate(g:C_Templates,"Idioms.function")
inoremap <buffer> <silent> `+rt :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.RTTI")
inoremap <buffer> <silent> `+na :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.namespace alias")
inoremap <buffer> <silent> `+unb :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.namespace block xxx")
inoremap <buffer> <silent> `+un :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.using namespace xxx")
inoremap <buffer> <silent> `+uns :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.using namespace std")
inoremap <buffer> <silent> `+oof :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.open output file")
inoremap <buffer> <silent> `+oif :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.open input file")
inoremap <buffer> <silent> `+ex :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.extern C")
inoremap <buffer> <silent> `+caa :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.catch all")
inoremap <buffer> <silent> `+ca :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.catch")
inoremap <buffer> <silent> `+tr :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.try catch")
inoremap <buffer> <silent> `+ioi :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.operator, in")
inoremap <buffer> <silent> `+ioo :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.operator, out")
inoremap <buffer> <silent> `+tf :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.template function")
inoremap <buffer> <silent> `+ita :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template accessor")
inoremap <buffer> <silent> `+itm :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template method")
inoremap <buffer> <silent> `+itcn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template class using new")
inoremap <buffer> <silent> `+itc :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.template class")
inoremap <buffer> <silent> `+ia :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.accessor")
inoremap <buffer> <silent> `+im :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.method")
inoremap <buffer> <silent> `+icn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.class using new")
inoremap <buffer> <silent> `+ic :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.IMPLEMENTATION.class")
inoremap <buffer> <silent> `+ec :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.error class")
inoremap <buffer> <silent> `+tcn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.template class using new")
inoremap <buffer> <silent> `+tc :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.template class")
inoremap <buffer> <silent> `+cn :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.class using new")
inoremap <buffer> <silent> `+c :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.class")
inoremap <buffer> <silent> `+fb :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.ios flagbits")
inoremap <buffer> <silent> `+om :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.output manipulators")
inoremap <buffer> <silent> `+ich :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.include C std lib header")
inoremap <buffer> <silent> `+ih :call mmtemplates#core#InsertTemplate(g:C_Templates,"C++.include C++ std lib header")
inoremap <buffer> <silent> `cma :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.macros")
inoremap <buffer> <silent> `csc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.special comments")
inoremap <buffer> <silent> `ckc :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.keyword comments")
inoremap <buffer> <silent> `chs :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.H file sections")
inoremap <buffer> <silent> `ccs :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.C file sections")
inoremap <buffer> <silent> `cfdh :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.file description header")
inoremap <buffer> <silent> `cfdi :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.file description impl")
inoremap <buffer> <silent> `ccl :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.class")
inoremap <buffer> <silent> `cme :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.method")
inoremap <buffer> <silent> `cfu :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.function")
inoremap <buffer> <silent> `cfr :call mmtemplates#core#InsertTemplate(g:C_Templates,"Comments.frame")
inoremap <buffer> <silent> `njt :call mmtemplates#core#InsertTemplate(g:C_Templates,"Snippets.jump tags")
imap <buffer> <silent> `hm :call C_Help("m")
imap <buffer> <silent> `hp :call C_HelpCsupport()
imap <buffer> <silent> `ro :call C_Toggle_Gvim_Xterm()
imap <buffer> <silent> `rx :call C_XtermSize()
imap <buffer> <silent> `rs :call C_Settings()
imap <buffer> <silent> `rh :call C_Hardcopy()
imap <buffer> <silent> `ri :call C_Indent()
imap <buffer> <silent> `rccs :call C_CppcheckSeverityInput()
imap <buffer> <silent> `rcc :call C_CppcheckCheck():call C_HlMessage()
imap <buffer> <silent> `rpa :call C_SplintArguments()
imap <buffer> <silent> `rp :call C_SplintCheck():call C_HlMessage()
imap <buffer> <silent> `rma :call C_MakeArguments()
imap <buffer> <silent> `rme :call C_ExeToRun()
imap <buffer> <silent> `rmc :call C_MakeClean()
imap <buffer> <silent> `rcm :call C_ChooseMakefile()
imap <buffer> <silent> `rm :call C_Make()
imap <buffer> <silent> `ra :call C_Arguments()
imap <buffer> <silent> `rr :call C_Run()
imap <buffer> <silent> `rl :call C_Link():call C_HlMessage()
imap <buffer> <silent> `rc :call C_Compile():call C_HlMessage()
inoremap <buffer> <silent> `nts :call mmtemplates#core#ChooseStyle(g:C_Templates,"!pick")
inoremap <buffer> <silent> `ntr :call mmtemplates#core#ReadTemplates(g:C_Templates,"reload","all")
inoremap <buffer> <silent> `ntl :call mmtemplates#core#EditTemplateFiles(g:C_Templates,-1)
inoremap <buffer> <silent> `ns :call C_ProtoShow()
inoremap <buffer> <silent> `nc :call C_ProtoClear()
inoremap <buffer> <silent> `ni :call C_ProtoInsert()
inoremap <buffer> <silent> `nm :call C_ProtoPick("method")
inoremap <buffer> <silent> `nf :call C_ProtoPick("function")
inoremap <buffer> <silent> `np :call C_ProtoPick("function")
inoremap <buffer> <silent> `ne :call C_CodeSnippet("e")
inoremap <buffer> <silent> `nw :call C_CodeSnippet("w")
inoremap <buffer> <silent> `nv :call C_CodeSnippet("view")
inoremap <buffer> <silent> `nr :call C_CodeSnippet("r")
inoremap <buffer> <silent> `in :call C_CodeFor("down"    )
inoremap <buffer> <silent> `i0 :call C_CodeFor("up"    )
inoremap <buffer> <silent> `pr0 :call C_PPIf0Remove()
inoremap <buffer> <silent> `pi0 :call C_PPIf0("a")2ji
inoremap <buffer> <silent> `cx :call C_CommentToggle( )
inoremap <buffer> <silent> `ct :call C_InsertDateAndTime('dt')a
inoremap <buffer> <silent> `cd :call C_InsertDateAndTime('d')a
inoremap <buffer> <silent> `cj :call C_AdjustLineEndComm()a
inoremap <buffer> <silent> `cl :call C_EndOfLineComment()
inoremap <buffer> { {}O
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal nobuflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=youcompleteme#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=~/.vim/c-support/wordlists/c-c++-keywords.list,~/.vim/c-support/wordlists/k+r.list,~/.vim/c-support/wordlists/stl_index.list
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'cpp'
setlocal filetype=cpp
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=youcompleteme#OmniComplete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=8
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=~/.vim/dict.add
setlocal spelllang=en_gb
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'cpp11'
setlocal syntax=cpp11
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 183 - ((8 * winheight(0) + 18) / 37)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
183
normal! 051|
wincmd w
argglobal
enew
file __Tagbar__
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=TagbarBalloonExpr()
setlocal nobinary
setlocal bufhidden=hide
setlocal nobuflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=youcompleteme#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'tagbar'
setlocal filetype=tagbar
endif
setlocal foldcolumn=0
setlocal nofoldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=youcompleteme#OmniComplete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=8
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=~/.vim/dict.add
setlocal spelllang=en_gb
setlocal statusline=%!TagbarGenerateStatusline()
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'tagbar'
setlocal syntax=tagbar
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal winfixwidth
setlocal nowrap
setlocal wrapmargin=0
wincmd w
2wincmd w
exe '1resize ' . ((&lines * 1 + 20) / 41)
exe 'vert 1resize ' . ((&columns * 119 + 80) / 160)
exe '2resize ' . ((&lines * 37 + 20) / 41)
exe 'vert 2resize ' . ((&columns * 119 + 80) / 160)
exe 'vert 3resize ' . ((&columns * 40 + 80) / 160)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
