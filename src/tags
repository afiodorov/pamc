!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	pam.h	/^	A() : data(3) {};$/;"	f	class:A	access:public	signature:()
A	pam.h	/^	A() {};$/;"	f	class:A	access:public	signature:()
A	pam.h	/^class A {$/;"	c
A	pam.h	/^class A<int> {$/;"	c
A::A	pam.h	/^	A() : data(3) {};$/;"	f	class:A	access:public	signature:()
A::A	pam.h	/^	A() {};$/;"	f	class:A	access:public	signature:()
A::data	pam.h	/^	T data;$/;"	m	class:A	access:public
A::data	pam.h	/^	int data;$/;"	m	class:A	access:public
BIGDECIMAL_H_	BigDecimal.h	2;"	d
BigDecimal	BigDecimal.h	/^class BigDecimal { };$/;"	c
BigDecimal	BigDecimal_mpf.hpp	/^	BigDecimal();$/;"	p	class:BigDecimal	access:public	signature:()
BigDecimal	BigDecimal_mpf.hpp	/^	BigDecimal(const BigDecimal &value);$/;"	p	class:BigDecimal	access:public	signature:(const BigDecimal &value)
BigDecimal	BigDecimal_mpf.hpp	/^	BigDecimal(const BigDecimalBase &value);$/;"	p	class:BigDecimal	access:public	signature:(const BigDecimalBase &value)
BigDecimal	BigDecimal_mpf.hpp	/^	BigDecimal(double value);$/;"	p	class:BigDecimal	access:public	signature:(double value)
BigDecimal	BigDecimal_mpf.hpp	/^	BigDecimal(mpf_t &value);$/;"	p	class:BigDecimal	access:public	signature:(mpf_t &value)
BigDecimal	BigDecimal_mpf.hpp	/^class BigDecimal<mpf_t> : public BigDecimalBase<mpf_t> {$/;"	c	inherits:BigDecimalBase
BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::BigDecimal()$/;"	f	class:BigDecimal	signature:()
BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::BigDecimal(const BigDecimal &value) {$/;"	f	class:BigDecimal	signature:(const BigDecimal &value)
BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::BigDecimal(const BigDecimalBase &value) {$/;"	f	class:BigDecimal	signature:(const BigDecimalBase &value)
BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::BigDecimal(double value)$/;"	f	class:BigDecimal	signature:(double value)
BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::BigDecimal(mpf_t &value)$/;"	f	class:BigDecimal	signature:(mpf_t &value)
BigDecimal::BigDecimal	BigDecimal_mpf.hpp	/^	BigDecimal();$/;"	p	class:BigDecimal	access:public	signature:()
BigDecimal::BigDecimal	BigDecimal_mpf.hpp	/^	BigDecimal(const BigDecimal &value);$/;"	p	class:BigDecimal	access:public	signature:(const BigDecimal &value)
BigDecimal::BigDecimal	BigDecimal_mpf.hpp	/^	BigDecimal(const BigDecimalBase &value);$/;"	p	class:BigDecimal	access:public	signature:(const BigDecimalBase &value)
BigDecimal::BigDecimal	BigDecimal_mpf.hpp	/^	BigDecimal(double value);$/;"	p	class:BigDecimal	access:public	signature:(double value)
BigDecimal::BigDecimal	BigDecimal_mpf.hpp	/^	BigDecimal(mpf_t &value);$/;"	p	class:BigDecimal	access:public	signature:(mpf_t &value)
BigDecimal::BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::BigDecimal()$/;"	f	class:BigDecimal	signature:()
BigDecimal::BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::BigDecimal(const BigDecimal &value) {$/;"	f	class:BigDecimal	signature:(const BigDecimal &value)
BigDecimal::BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::BigDecimal(const BigDecimalBase &value) {$/;"	f	class:BigDecimal	signature:(const BigDecimalBase &value)
BigDecimal::BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::BigDecimal(double value)$/;"	f	class:BigDecimal	signature:(double value)
BigDecimal::BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::BigDecimal(mpf_t &value)$/;"	f	class:BigDecimal	signature:(mpf_t &value)
BigDecimal::operator *=	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>& BigDecimal<mpf_t>::operator*=(const BigDecimal &rhs)$/;"	f	class:BigDecimal	signature:(const BigDecimal &rhs)
BigDecimal::operator +=	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>& BigDecimal<mpf_t>::operator+=(const BigDecimal &rhs)$/;"	f	class:BigDecimal	signature:(const BigDecimal &rhs)
BigDecimal::operator -=	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>& BigDecimal<mpf_t>::operator-=(const BigDecimal &rhs)$/;"	f	class:BigDecimal	signature:(const BigDecimal &rhs)
BigDecimal::operator /=	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>& BigDecimal<mpf_t>::operator\/=(const BigDecimal &rhs)$/;"	f	class:BigDecimal	signature:(const BigDecimal &rhs)
BigDecimal::operator <	BigDecimal_mpf.hpp	/^inline bool BigDecimal<mpf_t>::operator<(const BigDecimal &other) const$/;"	f	class:BigDecimal	signature:(const BigDecimal &other) const
BigDecimal::operator <<	BigDecimal_mpf.hpp	/^	friend std::ostream& operator<<(std::ostream& osObject, const BigDecimal& bDecimal);$/;"	p	class:BigDecimal	access:friend	signature:(std::ostream& osObject, const BigDecimal& bDecimal)
BigDecimal::operator =	BigDecimal_mpf.hpp	/^	BigDecimal& operator=(const double &rhs); \/\/ avoids a cast$/;"	p	class:BigDecimal	access:public	signature:(const double &rhs)
BigDecimal::operator =	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>& BigDecimal<mpf_t>::operator=(const BigDecimal &rhs)$/;"	f	class:BigDecimal	signature:(const BigDecimal &rhs)
BigDecimal::operator ==	BigDecimal_mpf.hpp	/^inline bool BigDecimal<mpf_t>::operator==(const BigDecimal &other) const$/;"	f	class:BigDecimal	signature:(const BigDecimal &other) const
BigDecimal::operator >	BigDecimal_mpf.hpp	/^inline bool BigDecimal<mpf_t>::operator>(const BigDecimal &other) const$/;"	f	class:BigDecimal	signature:(const BigDecimal &other) const
BigDecimal::operator double	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::operator double() const {$/;"	f	class:BigDecimal	signature:() const
BigDecimal::override	BigDecimal_mpf.hpp	/^	BigDecimal<mpf_t>& operator*=(const BigDecimal &rhs) override;$/;"	m	class:BigDecimal	access:public
BigDecimal::override	BigDecimal_mpf.hpp	/^	BigDecimal<mpf_t>& operator+=(const BigDecimal &rhs) override;$/;"	m	class:BigDecimal	access:public
BigDecimal::override	BigDecimal_mpf.hpp	/^	BigDecimal<mpf_t>& operator-=(const BigDecimal &rhs) override;$/;"	m	class:BigDecimal	access:public
BigDecimal::override	BigDecimal_mpf.hpp	/^	BigDecimal<mpf_t>& operator= (const BigDecimal &rhs) override;$/;"	m	class:BigDecimal	access:public
BigDecimal::override	BigDecimal_mpf.hpp	/^	BigDecimal<mpf_t>& operator\/=(const BigDecimal &rhs) override;$/;"	m	class:BigDecimal	access:public
BigDecimal::override	BigDecimal_mpf.hpp	/^	bool operator<(const BigDecimal &other) const override;$/;"	m	class:BigDecimal	access:public
BigDecimal::override	BigDecimal_mpf.hpp	/^	bool operator==(const BigDecimal &other) const override;$/;"	m	class:BigDecimal	access:public
BigDecimal::override	BigDecimal_mpf.hpp	/^	bool operator>(const BigDecimal &other) const override;$/;"	m	class:BigDecimal	access:public
BigDecimal::override	BigDecimal_mpf.hpp	/^	operator double() const override;$/;"	m	class:BigDecimal	access:public
BigDecimal::~BigDecimal	BigDecimal_mpf.hpp	/^	virtual ~BigDecimal();$/;"	p	class:BigDecimal	access:public	signature:()
BigDecimal::~BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::~BigDecimal() $/;"	f	class:BigDecimal	signature:()
BigDecimalBase	BigDecimal.h	/^	BigDecimalBase() {};$/;"	f	class:BigDecimalBase	access:public	signature:()
BigDecimalBase	BigDecimal.h	/^	BigDecimalBase(T& t) {};$/;"	f	class:BigDecimalBase	access:public	signature:(T& t)
BigDecimalBase	BigDecimal.h	/^class BigDecimalBase {$/;"	c
BigDecimalBase::BigDecimalBase	BigDecimal.h	/^	BigDecimalBase() {};$/;"	f	class:BigDecimalBase	access:public	signature:()
BigDecimalBase::BigDecimalBase	BigDecimal.h	/^	BigDecimalBase(T& t) {};$/;"	f	class:BigDecimalBase	access:public	signature:(T& t)
BigDecimalBase::data	BigDecimal.h	/^	T data;$/;"	m	class:BigDecimalBase	access:protected
BigDecimalBase::getData	BigDecimal.h	/^	const T* getData() const;$/;"	p	class:BigDecimalBase	access:public	signature:() const
BigDecimalBase::getData	BigDecimal.h	/^inline const T* BigDecimalBase<T>::getData() const$/;"	f	class:BigDecimalBase	signature:() const
BigDecimalBase::operator !=	BigDecimal.h	/^	bool operator!=(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator !=	BigDecimal.h	/^inline bool BigDecimalBase<T>::operator!=(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator *	BigDecimal.h	/^	const BigDecimal<T> operator*(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator *	BigDecimal.h	/^inline const BigDecimal<T> BigDecimalBase<T>::operator*(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator *=	BigDecimal.h	/^	virtual BigDecimal<T>& operator*=(const BigDecimal<T> &rhs) = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &rhs)
BigDecimalBase::operator +	BigDecimal.h	/^	const BigDecimal<T> operator+(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator +	BigDecimal.h	/^inline const BigDecimal<T> BigDecimalBase<T>::operator+(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator +=	BigDecimal.h	/^	virtual BigDecimal<T>& operator+=(const BigDecimal<T> &rhs) = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &rhs)
BigDecimalBase::operator -	BigDecimal.h	/^	const BigDecimal<T> operator-(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator -	BigDecimal.h	/^inline const BigDecimal<T> BigDecimalBase<T>::operator-(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator -=	BigDecimal.h	/^	virtual BigDecimal<T>& operator-=(const BigDecimal<T> &rhs) = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &rhs)
BigDecimalBase::operator /	BigDecimal.h	/^	const BigDecimal<T> operator\/(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator /	BigDecimal.h	/^inline const BigDecimal<T> BigDecimalBase<T>::operator\/(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator /=	BigDecimal.h	/^	virtual BigDecimal<T>& operator\/=(const BigDecimal<T> &rhs) = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &rhs)
BigDecimalBase::operator <	BigDecimal.h	/^	virtual bool operator< (const BigDecimal<T> &other) const = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator <<	BigDecimal.h	/^	friend std::ostream& operator<<(std::ostream& osObject, const BigDecimal<mpf_t>&);$/;"	p	class:BigDecimalBase	access:friend	signature:(std::ostream& osObject, const BigDecimal<mpf_t>&)
BigDecimalBase::operator <=	BigDecimal.h	/^	bool operator<=(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator <=	BigDecimal.h	/^inline bool BigDecimalBase<T>::operator<=(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator =	BigDecimal.h	/^	virtual BigDecimal<T>& operator= (const BigDecimal<T> &rhs) = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &rhs)
BigDecimalBase::operator ==	BigDecimal.h	/^	virtual bool operator==(const BigDecimal<T> &other) const = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator >	BigDecimal.h	/^	virtual bool operator> (const BigDecimal<T> &other) const = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator >=	BigDecimal.h	/^	bool operator>=(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator >=	BigDecimal.h	/^inline bool BigDecimalBase<T>::operator>=(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
BigDecimalBase::operator double	BigDecimal.h	/^	virtual operator double() const = 0;$/;"	p	class:BigDecimalBase	access:public	signature:() const
BigDecimalBase::toString	BigDecimal.h	/^	void toString(std::ostream& osObject) const;$/;"	p	class:BigDecimalBase	access:protected	signature:(std::ostream& osObject) const
BigDecimalBase::toString	BigDecimal.h	/^inline void BigDecimalBase<T>::toString(std::ostream& osObject) const$/;"	f	class:BigDecimalBase	signature:(std::ostream& osObject) const
PAM	pam.cpp	/^namespace PAM {$/;"	n	file:
PAM::bruteforceEigenvalue	pam.cpp	/^		bruteforceEigenvalue(std::vector<BigDecimal<T>>& vector) $/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector)
PAM::findDet	pam.cpp	/^	BigDecimal<T> findDet(std::vector<BigDecimal<T>>& vector, $/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector, double addThisToDiagonal = 0)
PAM::getLowerbound	pam.cpp	/^	double getLowerbound(const T& max) {$/;"	f	namespace:PAM	signature:(const T& max)
PAM::getMax	pam.cpp	/^	BigDecimal<T> getMax(std::vector<BigDecimal<T>>& vector) $/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector)
PAM::getMin	pam.cpp	/^	BigDecimal<T> getMin(std::vector<BigDecimal<T>>& vector)$/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector)
PAM::getNorm	pam.cpp	/^	BigDecimal<T> getNorm(const std::vector<BigDecimal<T>>& vector,$/;"	f	namespace:PAM	signature:(const std::vector<BigDecimal<T>>& vector, double p = 2)
PAM::multiplyByMatrix	pam.cpp	/^	BigDecimal<T> multiplyByMatrix(std::vector<BigDecimal<T>>& vector,$/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector, const std::vector<BigDecimal<T>>& matrix)
PAM::setValuesToWeibull	pam.cpp	/^	void setValuesToWeibull(std::vector<BigDecimal<T>>& vector, $/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector, double gamma)
RANDOM_H_	Random.h	9;"	d
Random	Random.cpp	/^Random::Random() {$/;"	f	class:Random	signature:()
Random	Random.h	/^	Random();$/;"	p	class:Random	access:public	signature:()
Random	Random.h	/^class Random {$/;"	c
Random::Random	Random.cpp	/^Random::Random() {$/;"	f	class:Random	signature:()
Random::Random	Random.h	/^	Random();$/;"	p	class:Random	access:public	signature:()
Random::exponential	Random.cpp	/^double Random::exponential(double lambda) {$/;"	f	class:Random	signature:(double lambda)
Random::exponential	Random.h	/^	static double exponential(double gamma);$/;"	p	class:Random	access:public	signature:(double gamma)
Random::generator	Random.cpp	/^std::default_random_engine Random::generator = std::default_random_engine(seed);$/;"	m	class:Random	file:
Random::generator	Random.h	/^	static std::default_random_engine generator;$/;"	m	class:Random	access:public
Random::generator64	Random.cpp	/^std::mt19937_64 Random::generator64 = std::mt19937_64(seed);$/;"	m	class:Random	file:
Random::generator64	Random.h	/^	static std::mt19937_64 generator64;$/;"	m	class:Random	access:public
Random::seed	Random.cpp	/^unsigned Random::seed = std::chrono::system_clock::now().time_since_epoch().count();$/;"	m	class:Random	file:
Random::seed	Random.h	/^	static unsigned seed;$/;"	m	class:Random	access:public
Random::unifRand	Random.cpp	/^double Random::unifRand()$/;"	f	class:Random	signature:()
Random::unifRand	Random.h	/^	static double unifRand();$/;"	p	class:Random	access:public	signature:()
Random::weibMaxRand	Random.cpp	/^double Random::weibMaxRand(double gamma, double u, long long n)$/;"	f	class:Random	signature:(double gamma, double u, long long n)
Random::weibMaxRand	Random.cpp	/^double Random::weibMaxRand(double gamma, long long n)$/;"	f	class:Random	signature:(double gamma, long long n)
Random::weibMaxRand	Random.h	/^	static double weibMaxRand(double gamma, double u, long long n);$/;"	p	class:Random	access:public	signature:(double gamma, double u, long long n)
Random::weibMaxRand	Random.h	/^	static double weibMaxRand(double gamma, long long n);$/;"	p	class:Random	access:public	signature:(double gamma, long long n)
Random::weibRand	Random.cpp	/^double Random::weibRand(double gamma)$/;"	f	class:Random	signature:(double gamma)
Random::weibRand	Random.h	/^	static double weibRand(double gamma);$/;"	p	class:Random	access:public	signature:(double gamma)
Random::~Random	Random.cpp	/^Random::~Random() {$/;"	f	class:Random	signature:()
Random::~Random	Random.h	/^	virtual ~Random();$/;"	p	class:Random	access:public	signature:()
abs	BigDecimal_mpf.hpp	/^inline const BigDecimal<mpf_t> abs(const BigDecimal<mpf_t>& bd)$/;"	f	signature:(const BigDecimal<mpf_t>& bd)
bigDecimal	pam.cpp	/^typedef BigDecimal<mpf_t> bigDecimal;$/;"	t	file:
bruteforceEigenvalue	pam.cpp	/^		bruteforceEigenvalue(std::vector<BigDecimal<T>>& vector) $/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector)
data	BigDecimal.h	/^	T data;$/;"	m	class:BigDecimalBase	access:protected
data	pam.h	/^	T data;$/;"	m	class:A	access:public
data	pam.h	/^	int data;$/;"	m	class:A	access:public
exp	BigDecimal_mpf.hpp	/^inline const BigDecimal<mpf_t> exp(const BigDecimal<mpf_t>& bd) $/;"	f	signature:(const BigDecimal<mpf_t>& bd)
exponential	Random.cpp	/^double Random::exponential(double lambda) {$/;"	f	class:Random	signature:(double lambda)
exponential	Random.h	/^	static double exponential(double gamma);$/;"	p	class:Random	access:public	signature:(double gamma)
findDet	pam.cpp	/^	BigDecimal<T> findDet(std::vector<BigDecimal<T>>& vector, $/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector, double addThisToDiagonal = 0)
generator	Random.cpp	/^std::default_random_engine Random::generator = std::default_random_engine(seed);$/;"	m	class:Random	file:
generator	Random.h	/^	static std::default_random_engine generator;$/;"	m	class:Random	access:public
generator64	Random.cpp	/^std::mt19937_64 Random::generator64 = std::mt19937_64(seed);$/;"	m	class:Random	file:
generator64	Random.h	/^	static std::mt19937_64 generator64;$/;"	m	class:Random	access:public
getData	BigDecimal.h	/^	const T* getData() const;$/;"	p	class:BigDecimalBase	access:public	signature:() const
getData	BigDecimal.h	/^inline const T* BigDecimalBase<T>::getData() const$/;"	f	class:BigDecimalBase	signature:() const
getLowerbound	pam.cpp	/^	double getLowerbound(const T& max) {$/;"	f	namespace:PAM	signature:(const T& max)
getMax	pam.cpp	/^	BigDecimal<T> getMax(std::vector<BigDecimal<T>>& vector) $/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector)
getMin	pam.cpp	/^	BigDecimal<T> getMin(std::vector<BigDecimal<T>>& vector)$/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector)
getNorm	pam.cpp	/^	BigDecimal<T> getNorm(const std::vector<BigDecimal<T>>& vector,$/;"	f	namespace:PAM	signature:(const std::vector<BigDecimal<T>>& vector, double p = 2)
handler	pam.cpp	/^void handler(int sig) {$/;"	f	signature:(int sig)
interval	pam.cpp	/^	interval(const T1 &lower, const T2 &upper) : lower(lower), upper(upper) {};$/;"	f	struct:interval	access:public	signature:(const T1 &lower, const T2 &upper)
interval	pam.cpp	/^struct interval$/;"	s	file:
interval::interval	pam.cpp	/^	interval(const T1 &lower, const T2 &upper) : lower(lower), upper(upper) {};$/;"	f	struct:interval	access:public	signature:(const T1 &lower, const T2 &upper)
interval::lower	pam.cpp	/^	T1 lower;$/;"	m	struct:interval	file:	access:public
interval::upper	pam.cpp	/^	T2 upper;$/;"	m	struct:interval	file:	access:public
log	BigDecimal_mpf.hpp	/^inline double log(const BigDecimal<mpf_t>& bd)$/;"	f	signature:(const BigDecimal<mpf_t>& bd)
lower	pam.cpp	/^	T1 lower;$/;"	m	struct:interval	file:	access:public
main	pam.cpp	/^int main(int argc, char* argv[] ) $/;"	f	signature:(int argc, char* argv[] )
multiplyByMatrix	pam.cpp	/^	BigDecimal<T> multiplyByMatrix(std::vector<BigDecimal<T>>& vector,$/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector, const std::vector<BigDecimal<T>>& matrix)
operator !=	BigDecimal.h	/^	bool operator!=(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
operator !=	BigDecimal.h	/^inline bool BigDecimalBase<T>::operator!=(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
operator !=	BigDecimal_mpf.hpp	/^inline bool operator!= (const double& number, const BigDecimal<T>& bigDecimal) {$/;"	f	signature:(const double& number, const BigDecimal<T>& bigDecimal)
operator *	BigDecimal.h	/^	const BigDecimal<T> operator*(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
operator *	BigDecimal.h	/^inline const BigDecimal<T> BigDecimalBase<T>::operator*(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
operator *=	BigDecimal.h	/^	virtual BigDecimal<T>& operator*=(const BigDecimal<T> &rhs) = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &rhs)
operator *=	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>& BigDecimal<mpf_t>::operator*=(const BigDecimal &rhs)$/;"	f	class:BigDecimal	signature:(const BigDecimal &rhs)
operator *=	BigDecimal_mpf.hpp	/^inline std::vector<BigDecimal<T>>& operator*=(std::vector<BigDecimal<T>>& vector,$/;"	f	signature:(std::vector<BigDecimal<T>>& vector, const BigDecimal<T>& bDecimal)
operator +	BigDecimal.h	/^	const BigDecimal<T> operator+(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
operator +	BigDecimal.h	/^inline const BigDecimal<T> BigDecimalBase<T>::operator+(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
operator +=	BigDecimal.h	/^	virtual BigDecimal<T>& operator+=(const BigDecimal<T> &rhs) = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &rhs)
operator +=	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>& BigDecimal<mpf_t>::operator+=(const BigDecimal &rhs)$/;"	f	class:BigDecimal	signature:(const BigDecimal &rhs)
operator +=	BigDecimal_mpf.hpp	/^inline std::vector<BigDecimal<T>>& operator+=(std::vector<BigDecimal<T>>& vector,$/;"	f	signature:(std::vector<BigDecimal<T>>& vector, const BigDecimal<T>& bDecimal)
operator -	BigDecimal.h	/^	const BigDecimal<T> operator-(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
operator -	BigDecimal.h	/^inline const BigDecimal<T> BigDecimalBase<T>::operator-(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
operator -=	BigDecimal.h	/^	virtual BigDecimal<T>& operator-=(const BigDecimal<T> &rhs) = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &rhs)
operator -=	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>& BigDecimal<mpf_t>::operator-=(const BigDecimal &rhs)$/;"	f	class:BigDecimal	signature:(const BigDecimal &rhs)
operator -=	BigDecimal_mpf.hpp	/^inline std::vector<BigDecimal<T>>& operator-=(std::vector<BigDecimal<T>>& vector,$/;"	f	signature:(std::vector<BigDecimal<T>>& vector, const BigDecimal<T>& bDecimal)
operator /	BigDecimal.h	/^	const BigDecimal<T> operator\/(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
operator /	BigDecimal.h	/^inline const BigDecimal<T> BigDecimalBase<T>::operator\/(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
operator /=	BigDecimal.h	/^	virtual BigDecimal<T>& operator\/=(const BigDecimal<T> &rhs) = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &rhs)
operator /=	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>& BigDecimal<mpf_t>::operator\/=(const BigDecimal &rhs)$/;"	f	class:BigDecimal	signature:(const BigDecimal &rhs)
operator /=	BigDecimal_mpf.hpp	/^inline std::vector<BigDecimal<T>>& operator\/=(std::vector<BigDecimal<T>>& vector,$/;"	f	signature:(std::vector<BigDecimal<T>>& vector, const BigDecimal<T>& bDecimal)
operator <	BigDecimal.h	/^	virtual bool operator< (const BigDecimal<T> &other) const = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
operator <	BigDecimal_mpf.hpp	/^inline bool BigDecimal<mpf_t>::operator<(const BigDecimal &other) const$/;"	f	class:BigDecimal	signature:(const BigDecimal &other) const
operator <	BigDecimal_mpf.hpp	/^inline bool operator< (const double& number, const BigDecimal<T>& bigDecimal) {$/;"	f	signature:(const double& number, const BigDecimal<T>& bigDecimal)
operator <<	BigDecimal.h	/^	friend std::ostream& operator<<(std::ostream& osObject, const BigDecimal<mpf_t>&);$/;"	p	class:BigDecimalBase	access:friend	signature:(std::ostream& osObject, const BigDecimal<mpf_t>&)
operator <<	BigDecimal_mpf.hpp	/^	friend std::ostream& operator<<(std::ostream& osObject, const BigDecimal& bDecimal);$/;"	p	class:BigDecimal	access:friend	signature:(std::ostream& osObject, const BigDecimal& bDecimal)
operator <<	BigDecimal_mpf.hpp	/^inline std::ostream& operator<<(std::ostream& osObject, const BigDecimal<mpf_t>& bd) {$/;"	f	signature:(std::ostream& osObject, const BigDecimal<mpf_t>& bd)
operator <=	BigDecimal.h	/^	bool operator<=(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
operator <=	BigDecimal.h	/^inline bool BigDecimalBase<T>::operator<=(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
operator <=	BigDecimal_mpf.hpp	/^inline bool operator<= (const double& number, const BigDecimal<T>& bigDecimal) {$/;"	f	signature:(const double& number, const BigDecimal<T>& bigDecimal)
operator =	BigDecimal.h	/^	virtual BigDecimal<T>& operator= (const BigDecimal<T> &rhs) = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &rhs)
operator =	BigDecimal_mpf.hpp	/^	BigDecimal& operator=(const double &rhs); \/\/ avoids a cast$/;"	p	class:BigDecimal	access:public	signature:(const double &rhs)
operator =	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>& BigDecimal<mpf_t>::operator=(const BigDecimal &rhs)$/;"	f	class:BigDecimal	signature:(const BigDecimal &rhs)
operator ==	BigDecimal.h	/^	virtual bool operator==(const BigDecimal<T> &other) const = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
operator ==	BigDecimal_mpf.hpp	/^inline bool BigDecimal<mpf_t>::operator==(const BigDecimal &other) const$/;"	f	class:BigDecimal	signature:(const BigDecimal &other) const
operator ==	BigDecimal_mpf.hpp	/^inline bool operator== (const double& number, const BigDecimal<T>& bigDecimal) {$/;"	f	signature:(const double& number, const BigDecimal<T>& bigDecimal)
operator >	BigDecimal.h	/^	virtual bool operator> (const BigDecimal<T> &other) const = 0;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
operator >	BigDecimal_mpf.hpp	/^inline bool BigDecimal<mpf_t>::operator>(const BigDecimal &other) const$/;"	f	class:BigDecimal	signature:(const BigDecimal &other) const
operator >	BigDecimal_mpf.hpp	/^inline bool operator> (const double& number, const BigDecimal<T>& bigDecimal) {$/;"	f	signature:(const double& number, const BigDecimal<T>& bigDecimal)
operator >=	BigDecimal.h	/^	bool operator>=(const BigDecimal<T> &other) const;$/;"	p	class:BigDecimalBase	access:public	signature:(const BigDecimal<T> &other) const
operator >=	BigDecimal.h	/^inline bool BigDecimalBase<T>::operator>=(const BigDecimal<T> &other) const$/;"	f	class:BigDecimalBase	signature:(const BigDecimal<T> &other) const
operator >=	BigDecimal_mpf.hpp	/^inline bool operator>= (const double& number, const BigDecimal<T>& bigDecimal) {$/;"	f	signature:(const double& number, const BigDecimal<T>& bigDecimal)
operator double	BigDecimal.h	/^	virtual operator double() const = 0;$/;"	p	class:BigDecimalBase	access:public	signature:() const
operator double	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::operator double() const {$/;"	f	class:BigDecimal	signature:() const
override	BigDecimal_mpf.hpp	/^	BigDecimal<mpf_t>& operator*=(const BigDecimal &rhs) override;$/;"	m	class:BigDecimal	access:public
override	BigDecimal_mpf.hpp	/^	BigDecimal<mpf_t>& operator+=(const BigDecimal &rhs) override;$/;"	m	class:BigDecimal	access:public
override	BigDecimal_mpf.hpp	/^	BigDecimal<mpf_t>& operator-=(const BigDecimal &rhs) override;$/;"	m	class:BigDecimal	access:public
override	BigDecimal_mpf.hpp	/^	BigDecimal<mpf_t>& operator= (const BigDecimal &rhs) override;$/;"	m	class:BigDecimal	access:public
override	BigDecimal_mpf.hpp	/^	BigDecimal<mpf_t>& operator\/=(const BigDecimal &rhs) override;$/;"	m	class:BigDecimal	access:public
override	BigDecimal_mpf.hpp	/^	bool operator<(const BigDecimal &other) const override;$/;"	m	class:BigDecimal	access:public
override	BigDecimal_mpf.hpp	/^	bool operator==(const BigDecimal &other) const override;$/;"	m	class:BigDecimal	access:public
override	BigDecimal_mpf.hpp	/^	bool operator>(const BigDecimal &other) const override;$/;"	m	class:BigDecimal	access:public
override	BigDecimal_mpf.hpp	/^	operator double() const override;$/;"	m	class:BigDecimal	access:public
print	pam.h	/^inline void print(A<T>& a) {$/;"	f	signature:(A<T>& a)
seed	Random.cpp	/^unsigned Random::seed = std::chrono::system_clock::now().time_since_epoch().count();$/;"	m	class:Random	file:
seed	Random.h	/^	static unsigned seed;$/;"	m	class:Random	access:public
setValuesToWeibull	pam.cpp	/^	void setValuesToWeibull(std::vector<BigDecimal<T>>& vector, $/;"	f	namespace:PAM	signature:(std::vector<BigDecimal<T>>& vector, double gamma)
sqrt	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t> sqrt(const BigDecimal<mpf_t>& bd) {$/;"	f	signature:(const BigDecimal<mpf_t>& bd)
toString	BigDecimal.h	/^	void toString(std::ostream& osObject) const;$/;"	p	class:BigDecimalBase	access:protected	signature:(std::ostream& osObject) const
toString	BigDecimal.h	/^inline void BigDecimalBase<T>::toString(std::ostream& osObject) const$/;"	f	class:BigDecimalBase	signature:(std::ostream& osObject) const
unifRand	Random.cpp	/^double Random::unifRand()$/;"	f	class:Random	signature:()
unifRand	Random.h	/^	static double unifRand();$/;"	p	class:Random	access:public	signature:()
upper	pam.cpp	/^	T2 upper;$/;"	m	struct:interval	file:	access:public
weibMaxRand	Random.cpp	/^double Random::weibMaxRand(double gamma, double u, long long n)$/;"	f	class:Random	signature:(double gamma, double u, long long n)
weibMaxRand	Random.cpp	/^double Random::weibMaxRand(double gamma, long long n)$/;"	f	class:Random	signature:(double gamma, long long n)
weibMaxRand	Random.h	/^	static double weibMaxRand(double gamma, double u, long long n);$/;"	p	class:Random	access:public	signature:(double gamma, double u, long long n)
weibMaxRand	Random.h	/^	static double weibMaxRand(double gamma, long long n);$/;"	p	class:Random	access:public	signature:(double gamma, long long n)
weibRand	Random.cpp	/^double Random::weibRand(double gamma)$/;"	f	class:Random	signature:(double gamma)
weibRand	Random.h	/^	static double weibRand(double gamma);$/;"	p	class:Random	access:public	signature:(double gamma)
~BigDecimal	BigDecimal_mpf.hpp	/^	virtual ~BigDecimal();$/;"	p	class:BigDecimal	access:public	signature:()
~BigDecimal	BigDecimal_mpf.hpp	/^inline BigDecimal<mpf_t>::~BigDecimal() $/;"	f	class:BigDecimal	signature:()
~Random	Random.cpp	/^Random::~Random() {$/;"	f	class:Random	signature:()
~Random	Random.h	/^	virtual ~Random();$/;"	p	class:Random	access:public	signature:()
